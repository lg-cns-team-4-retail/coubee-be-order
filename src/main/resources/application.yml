spring:
  application:
    name: coubee-be-order
  
  jpa:
    properties:
      hibernate:
        # N+1 문제를 해결하고 성능을 최적화하기 위해 배치 페치 크기를 설정합니다.
        # (Set the batch fetch size to resolve N+1 problems and optimize performance.)
        default_batch_fetch_size: 100

# Logging configuration
logging:
  level:
    com.coubee.coubeebeorder.remote.product: DEBUG
    com.coubee.coubeebeorder.remote.store: DEBUG
    feign: DEBUG

# Resilience4j Circuit Breaker Configuration
resilience4j:
  circuitbreaker:
    instances:
      productStock:
        failure-rate-threshold: 50
        sliding-window-size: 10
        wait-duration-in-open-state: 10s
        minimum-number-of-calls: 5
        permitted-number-of-calls-in-half-open-state: 3
        automatic-transition-from-open-to-half-open-enabled: true
      downstreamServices:
        failure-rate-threshold: 50
        sliding-window-size: 10
        wait-duration-in-open-state: 10s
        minimum-number-of-calls: 5
        permitted-number-of-calls-in-half-open-state: 3
        automatic-transition-from-open-to-half-open-enabled: true



  kafka:
    listener:
      ack-mode: manual_immediate
    consumer:
      group-id: ${spring.application.name}
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      enable-auto-commit: false
      auto-offset-reset: latest
      max-poll-records: 10
      properties:
        spring.json.trusted.packages: "*"
        spring.json.use.type.headers: false
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.add.type.headers: false

# PortOne API 설정
# portone:
#   api:
#     url: api.iamport.kr
#   v2:
#     store-id: ${PORTONE_STORE_ID:test_store}
#     channel-key: ${PORTONE_CHANNEL_KEY:test_channel}
#     webhook-secret: ${PORTONE_WEBHOOK_SECRET:test_webhook}

# Enable management endpoints for Kubernetes health checks and Prometheus
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus # Ensure 'prometheus' is in this list
      base-path: /actuator
  endpoint:
    health:
      show-details: always
      probes:
        enabled: true
      group:
        liveness:
          include: livenessState
        readiness:
          include: readinessState
  # Add the prometheus configuration block
  prometheus:
    metrics:
      export:
        enabled: true
  health:
    livenessstate:
      enabled: true
    readinessstate:
      enabled: true
  server:
    port: 8080
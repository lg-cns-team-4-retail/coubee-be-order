plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.coubee'
version = '0.0.1'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

// UTF-8 인코딩 설정 추가
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven { url 'https://repo.spring.io/milestone' }
}

ext {
    set('springCloudVersion', "2025.0.0-RC1")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // implementation 'org.springframework.boot:spring-boot-starter-security' // Removed - Gateway handles security
    
    // Spring Cloud
    implementation 'org.springframework.cloud:spring-cloud-starter-kubernetes-client-all'
    // implementation 'org.springframework.cloud:spring-cloud-starter-config'
    // implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'

    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'org.springframework.cloud:spring-cloud-starter-loadbalancer'
    
    // Circuit Breaker
    // implementation 'io.github.resilience4j:resilience4j-spring-boot3'
    // implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j'
    
    // PostgreSQL
    runtimeOnly 'org.postgresql:postgresql'
    
    // H2 Database
    runtimeOnly 'com.h2database:h2'
    
    // QR Code generation
    implementation 'com.google.zxing:core:3.5.3'
    implementation 'com.google.zxing:javase:3.5.3'

    // // Flyway
    // implementation 'org.flywaydb:flyway-core:10.15.0'
    // implementation 'org.flywaydb:flyway-database-postgresql:10.15.0'

    // Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'

    // Kafka
    implementation 'org.springframework.kafka:spring-kafka'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    
    // dotenv-java for environment variables
    implementation 'io.github.cdimascio:dotenv-java:2.2.0'

    // Tracing & Monitoring
    // implementation 'io.micrometer:micrometer-tracing-bridge-otel'
    // implementation 'io.opentelemetry:opentelemetry-exporter-zipkin'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // Iamport 결제 라이브러리
    implementation 'com.github.iamport:iamport-rest-client-java:0.2.23'
    
    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    
    // WireMock
    testImplementation 'org.springframework.cloud:spring-cloud-starter-contract-stub-runner'
    testImplementation 'org.springframework.cloud:spring-cloud-starter-contract-verifier'
    testImplementation 'org.wiremock:wiremock-standalone:3.0.1'
    
    
    // Embedded Kafka
    testImplementation 'org.springframework.kafka:spring-kafka-test'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

// 테스트 설정 - 임시로 비활성화 (테스트 구현 불완전)
tasks.named('test') {
    useJUnitPlatform()
    enabled = false
}

// 테스트 컴파일 비활성화
tasks.named('compileTestJava') {
    enabled = false
}


jar {
    enabled = false // plain.jar 생성 완전히 비활성화
}

tasks.register('getAppName') {
    doLast {
        println "${rootProject.name}"
    }
}

tasks.register('getAppVersion') {
    doLast {
        println "${project.version}"
    }
}